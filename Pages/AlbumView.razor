@page "/AlbumView/{ItemId}"
@using MSN.Components
@using MSN.ViewModel
@using MSN.Model
@inject AuthenticationStateProvider AuthenticationStateProvider


<EditForm Model="@Model">
    @if(Model?.CurrentAlbum != null) { 
    @if (IsAuthenticated)
    {
    <div class="row">
        <div class="col">
            <div class="nav-link" style="cursor:pointer;" @onclick='() => RedirectTo(string.Format("/Album/{0}", Model.CurrentAlbum.Id.ToString()))'><span class="oi oi-image" aria-hidden="true"></span> Edit Album</div>
        </div>
        <div class="col">
            @if (isConfirmDeleteMode)
            {
                    <div class="row m-0 p-0  alert alert-info">
                        <div class="col"> Delete Album? </div>
                        <div class="col text-right"> <button class="btn btn-sm  font-weight-bold  text-danger bg-transparent" @onclick="() => DeleteSelectedEntry()">Yes</button>  </div>
                        <div class="col text-right"><button type="button" class="btn btn-sm  font-weight-bold  text-primary bg-transparent" data-dismiss="modal" @onclick="() => isConfirmDeleteMode = false">Cancel</button> </div>
                    </div>
            }
            else
            {
        <div class="nav-link">
            <button class="btn bg-transparent" @onclick="() => isConfirmDeleteMode = true"><span class="oi oi-x" aria-hidden="true"></span>&nbsp;Delete Album</button>
        </div>
            }
        </div>
    </div>
    }
    <ul class="list-group mb-3">
        @if (!string.IsNullOrWhiteSpace(@Model?.CurrentAlbum?.Name))
        {
            <li class="list-group-item h2 text-capitalize">@Model?.CurrentAlbum?.Name</li>
        }
        @if (!string.IsNullOrWhiteSpace(@Model?.CurrentAlbum?.Comment))
        {
            <li class="list-group-item border-top">@Model?.CurrentAlbum?.Comment</li>
        }
    </ul>

    <div class="row">
        @foreach (ImagePost item in Model?.CurrentAlbum?.ImagePosts?.OrderBy(x=>x.DateCreated).Take(ImageListCountMultiplier * Take))
        {
            <div class="col-4">
                <ImagePostDisplayComponent ItemId="@item.Id.ToString()"></ImagePostDisplayComponent>
            </div>
        }
    </div>
    
    <div class="row-75 mb-2">
        <div class="col">
            @if ((Model?.CurrentAlbum?.ImagePosts?.Count??0) > (ImageListCountMultiplier*Take))
            {
                @if (isLoading)
                {
                    <div class="row m-0 p-0 pt-2 pb-3 w-100 small alert alert-info" style="cursor: wait;">
                        <div class="col-sm"><span class="btn btn-sm m-0 p-0  font-weight-bold  text-secondary bg-transparent" style="cursor: wait;">Loading...</span></div>
                    </div>
                }
                else
                {
                    <div class="row m-0 p-0 pt-2  w-100 small alert alert-info" style="cursor:pointer;" @onclick="LoadOlderPosts">
                        <div class="col-sm ml-2 m-0 p-0 "><span class="btn h4 m-0 p-0 font-weight-bold  text-secondary bg-transparent" style="cursor:pointer;">Load More...</span></div>
                    </div>
                }
            }
            else
                  if (Model.RequestOffset > 0)
            {
                <div class="row m-0 p-0  w-100 small alert alert-danger">
                    <div class="col-sm h4 font-weight-bold  text-secondary bg-transparent mt-2" style="font-size: 1rem;">No More Posts.</div>
                </div>
            }
        </div>
    </div>
    }
</EditForm>

@code {
    [Parameter]
    public string ItemId { get; set; }
    public AlbumViewerViewModel Model { get; set; } = new AlbumViewerViewModel();
    public bool IsAuthenticated { get { return AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated; } }
    public bool isConfirmDeleteMode { get; set; } = false;

    [Inject]
    protected NavigationManager NavigationManager { get; set; }
    [Inject]
    public MSN.Model.Util.ServerFileInfo ServerFileInfo { get; set; }
    [Inject]
    private MSN.BlazorServer.Data.MSNBlazorServerContext SecurityContext { get; set; }
    [Inject]
    private MSN.ModelContext.MSNContext DefaultContext { get; set; }
    public bool isLoading { get; set; } = false;
    public int ImageListCountMultiplier { get; set; } = 1;
    public int Take { get; set; } = 20;
    

    protected override void OnInitialized()
    {
        if (!ServerFileInfo.PerformDatabaseCheck(SecurityContext, DefaultContext) &&
        !NavigationManager.Uri.EndsWith("/install")
        )
            NavigationManager.NavigateTo("/install", true);
    }
    protected override void OnParametersSet()
    {
        if (ItemId != null)
        {
            Model.SetAlbum(Guid.Parse(ItemId));
        }
    }
    protected void DeleteSelectedEntry()
    {
        Model.DeleteCurrentAlbum();
        RedirectTo("/albums");
    }

    protected void RedirectTo(string redirectPath)
    {
        NavigationManager.NavigateTo(redirectPath, true);
    }
    protected void LoadOlderPosts()=>ImageListCountMultiplier++;
}