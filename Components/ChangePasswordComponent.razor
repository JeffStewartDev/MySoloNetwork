
@namespace MSN.Components
@using MSN.ViewModel
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider authenticationStateProvider
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager
    <EditForm Model="Model">
        <div class="card  card-shadow mb-3">
            <div class="card-header font-weight-bold">
                Change Password
            </div>
            <div class="card-body">
                <div class="form-group small">
                    <label for="OldPassword">Current Password</label>
                    <InputText @bind-Value="Model.OldPassword" type="password" class="form-control" id="OldPassword" placeholder=""></InputText>
                </div>
                <div class="form-group small">
                    <label for="NewPassword">New Password</label>
                    <InputText @bind-Value="Model.NewPassword" type="password" class="form-control" id="NewPassword" placeholder=""></InputText>
                </div>
                <div class="form-group small">
                    <label for="ConfirmNewPassword">Confirm New Password</label>
                    <InputText @bind-Value="Model.ConfirmNewPassword" type="password" class="form-control" id="ConfirmNewPassword" placeholder=""></InputText>
                </div>
            </div>

            <div class="card-footer">
                <button @onclick="ChangePassword" class="btn btn-primary">Change</button>
            </div>
        </div>
    </EditForm>
    @code
{



        public PasswordViewModel Model { get; set; } = new PasswordViewModel();
        [Inject]
        protected NavigationManager NavigationManager { get; set; }

        protected void RedirectTo(string redirectPath)
        {
            NavigationManager.NavigateTo(redirectPath, true);
        }
        protected async Task ChangePassword()
        {
            try
            {
                if (string.IsNullOrWhiteSpace(Model.OldPassword) || string.IsNullOrWhiteSpace(Model.NewPassword) || string.IsNullOrWhiteSpace(Model.ConfirmNewPassword))
                {
                    throw new Exception("All Password fields are required.");
                }
                if (!Model.NewPassword.Equals(Model.ConfirmNewPassword,StringComparison.CurrentCulture))
                {
                    throw new Exception("New Password and Confirm Password do not match.");
                }
                AuthenticationState authstate = await authenticationStateProvider.GetAuthenticationStateAsync();
                var user = await userManager.GetUserAsync(authstate.User);
                if (user == null)
                {
                    throw new Exception($"Unable to load user with ID '{userManager.GetUserId(authstate.User)}'.");
                }
                var result = await signInManager.UserManager.ChangePasswordAsync(user, Model.OldPassword, Model.NewPassword);
                if (result.Succeeded)
                {
                    await MessageBox("Password Changed Successfully.");
                    Model = new PasswordViewModel();
                }
                else
                    throw new Exception(result.Errors.FirstOrDefault()?.Description);

            }
            catch (Exception ex)
            {
                await MessageBox(ex.Message);
            }
        }


        [Inject]
        public Microsoft.JSInterop.IJSRuntime jSRuntime { get; set; }
        protected async Task MessageBox(string Message)
        {
            await jSRuntime.InvokeVoidAsync("alert", Message);
        }
        protected async ValueTask<bool> ConfirmBox(string Message)
        {
            return await jSRuntime.InvokeAsync<bool>("confirm", Message);
        }
        }
   
